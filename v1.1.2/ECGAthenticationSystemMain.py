import osimport tkinter as tkfrom tkinter import simpledialog, messagebox, filedialogfrom tkinter.ttk import Progressbarimport FeatureExtractorimport ModelTrainner# 处理登录def process_login():    username = username_entry.get()    if not login_filepath:        messagebox.showwarning("Warning", "Please Select a Test Data")        return    if username:        # 先执行 FeatureExtractor        FeatureExtractor.main(login_filepath, login_filename)        testname = login_filename[:len(login_filename)-4]        # 再执行 ModelTrainner        result = ModelTrainner.main(username, testname)        threshold = 70        if result > threshold:            show = 'Authentication Successful!'        else:            show = 'Authentication failed.'        result_var.set(show)        update_progress(100)        secondary_root.destroy()# 更新进度条def update_progress(progress):    progress_var.set(progress)    secondary_root.update_idletasks()# 打开二级界面def open_secondary_interface():    global secondary_root, progress_var    secondary_root = tk.Toplevel(root)    secondary_root.title("Processing")    secondary_root.geometry("400x200")    progress_var = tk.DoubleVar()    progress_bar_secondary = Progressbar(secondary_root, variable=progress_var, maximum=100)    progress_bar_secondary.pack(expand=True)    secondary_root.after(100, lambda: process_login())# 选择文件并执行注册def register_file_selection():    global register_filepath, register_filename    register_filepath = filedialog.askopenfilename()    register_filename = os.path.basename(register_filepath)    if register_filepath:        FeatureExtractor.main(register_filepath, register_filename)        print(f'Registered {register_filename} successfully.')        messagebox.showinfo("Result", f'Registered {register_filename} successfully.')# 选择文件并更新按钮右侧标签def select_test_data():    global login_filepath, login_filename    login_filepath = filedialog.askopenfilename()    login_filename = os.path.basename(login_filepath)    if login_filepath:        test_data_label.config(text=login_filename)# 创建主界面root = tk.Tk()root.title("Main Interface")root.geometry("600x400")  # 设置界面的大小# 使用Canvas创建圆角化界面canvas = tk.Canvas(root, bg="#f0f0f0", highlightthickness=0)canvas.pack(fill="both", expand=True)# 创建圆角矩形函数def round_rectangle(x1, y1, x2, y2, radius=25, **kwargs):    points = [x1 + radius, y1,              x1 + radius, y1,              x2 - radius, y1,              x2 - radius, y1,              x2, y1,              x2, y1 + radius,              x2, y1 + radius,              x2, y2 - radius,              x2, y2 - radius,              x2, y2,              x2 - radius, y2,              x2 - radius, y2,              x1 + radius, y2,              x1 + radius, y2,              x1, y2,              x1, y2 - radius,              x1, y2 - radius,              x1, y1 + radius,              x1, y1 + radius,              x1, y1]    return canvas.create_polygon(points, **kwargs, smooth=True)# 创建圆角矩形背景round_rectangle(10, 10, 590, 390, radius=50, fill="#d8e6f5")# 显示系统名称system_name_label = tk.Label(canvas, text="Cardioactive System", bg="#d8e6f5", font=("Arial", 24, "bold"))# 创建Label用于显示结果result_var = tk.StringVar()result_label = tk.Label(canvas, textvariable=result_var, bg="#d8e6f5", font=("Arial", 14))# 创建圆角按钮函数def create_rounded_button(canvas, x, y, width, height, radius, text, command, bg="#b3cde0", fg="black"):    btn_id = round_rectangle(x, y, x + width, y + height, radius=radius, fill=bg, outline="")    label_id = canvas.create_text(x + width / 2, y + height / 2, text=text, fill=fg, font=("Arial", 12))    def on_click(event):        command()    canvas.tag_bind(btn_id, "<Button-1>", on_click)    canvas.tag_bind(label_id, "<Button-1>", on_click)    return btn_id, label_id# 创建圆角按钮并绑定到函数register_button_id, register_label_id = create_rounded_button(canvas, 250, 360, 100, 30, 15, "Register",                                                              register_file_selection, bg="#b3cde0", fg="black")recognize_button_id, recognize_label_id = create_rounded_button(canvas, 200, 250, 200, 50, 25, "Login",                                                                open_secondary_interface, bg="#b3cde0", fg="black")# 创建用户名输入框username_label = tk.Label(canvas, text="Username:", bg="#d8e6f5", font=("Arial", 14))username_entry = tk.Entry(canvas, font=("Arial", 14))# 创建选择测试数据按钮select_data_button_id, select_data_button_label_id = create_rounded_button(canvas, 150, 180, 150, 30, 15,                                                                           "Select Test Data", select_test_data,                                                                           bg="#b3cde0", fg="black")test_data_label = tk.Label(canvas, text="", bg="#d8e6f5", font=("Arial", 12))# 布局系统名称、Label和用户名输入框system_name_label_window = canvas.create_window(300, 50, window=system_name_label)username_label_window = canvas.create_window(200, 120, window=username_label)username_entry_window = canvas.create_window(400, 120, window=username_entry)test_data_label_window = canvas.create_window(400, 180, window=test_data_label)result_label_window = canvas.create_window(300, 320, window=result_label)# 运行主循环root.mainloop()
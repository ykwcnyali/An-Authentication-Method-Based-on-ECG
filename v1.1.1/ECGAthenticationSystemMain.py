import timeimport osimport tkinter as tkfrom tkinter import simpledialog, messageboxfrom tkinter.ttk import Progressbarimport FeatureExtractorimport ModelTrainner# 获取文件列表def get_filenames_using_os(folder_path):    filenames = os.listdir(folder_path)    return filenames# 更新进度条def update_progress(progress):    progress_var.set(progress)    root.update_idletasks()# DataProcess函数def DataProcess():    namelist = get_filenames_using_os(os.getcwd() + '/data')    total_files = len(namelist)    for i, name in enumerate(namelist):        if name[:4] != 'tesr':            FeatureExtractor.main(name)            print(f'Subject {name} data processed.')            print('------------------------------------')        progress = (i + 1) / total_files * 100        update_progress(progress)        time.sleep(0.1)  # 模拟处理时间    print('-------------------------------------------------------')    print('All Exist Data Extracted.')    print('-------------------------------------------------------')    messagebox.showinfo("Result", "Data processing completed successfully")# 打开二级界面def open_secondary_interface():    username = simpledialog.askstring("Input", "Please enter the username:")    if username:        result = ModelTrainner.main(username)        threshold = 70        if result > threshold:            show = 'Authentication Successful!'        else:            show = 'Authentication failed.'        result_var.set(show)  # 更新Label的文本内容为方法的返回值# 创建主界面root = tk.Tk()root.title("Main Interface")root.geometry("600x400")  # 设置界面的大小# 使用Canvas创建圆角化界面canvas = tk.Canvas(root, bg="white", highlightthickness=0)canvas.pack(fill="both", expand=True)# 创建圆角矩形函数def round_rectangle(x1, y1, x2, y2, radius=25, **kwargs):    points = [x1 + radius, y1,              x1 + radius, y1,              x2 - radius, y1,              x2 - radius, y1,              x2, y1,              x2, y1 + radius,              x2, y1 + radius,              x2, y2 - radius,              x2, y2 - radius,              x2, y2,              x2 - radius, y2,              x2 - radius, y2,              x1 + radius, y2,              x1 + radius, y2,              x1, y2,              x1, y2 - radius,              x1, y2 - radius,              x1, y1 + radius,              x1, y1 + radius,              x1, y1]    return canvas.create_polygon(points, **kwargs, smooth=True)# 创建圆角矩形背景round_rectangle(10, 10, 590, 390, radius=50, fill="lightblue")# 显示系统名称system_name_label = tk.Label(canvas, text="Cardioactive System", bg="lightblue", font=("Arial", 24, "bold"))# 创建Label用于显示结果result_var = tk.StringVar()result_label = tk.Label(canvas, textvariable=result_var, bg="lightblue", font=("Arial", 14))# 创建进度条progress_var = tk.DoubleVar()progress_bar = Progressbar(canvas, variable=progress_var, maximum=100)# 创建圆角按钮函数def create_rounded_button(canvas, x, y, width, height, radius, text, command, bg="blue", fg="white"):    btn_id = round_rectangle(x, y, x + width, y + height, radius=radius, fill=bg, outline="")    label_id = canvas.create_text(x + width / 2, y + height / 2, text=text, fill=fg, font=("Arial", 12))    def on_click(event):        command()    canvas.tag_bind(btn_id, "<Button-1>", on_click)    canvas.tag_bind(label_id, "<Button-1>", on_click)    return btn_id, label_id# 创建圆角按钮并绑定到函数register_button_id, register_label_id = create_rounded_button(canvas, 100, 150, 200, 50, 25, "Register", DataProcess,                                                              bg="blue", fg="white")recognize_button_id, recognize_label_id = create_rounded_button(canvas, 300, 150, 200, 50, 25, "Recognize",                                                                open_secondary_interface, bg="green", fg="white")# 布局系统名称、Label和进度条system_name_label_window = canvas.create_window(300, 50, window=system_name_label)result_label_window = canvas.create_window(300, 250, window=result_label)progress_bar_window = canvas.create_window(300, 300, window=progress_bar, width=400)# 运行主循环root.mainloop()
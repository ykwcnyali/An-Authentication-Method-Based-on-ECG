import numpy as npimport matplotlib.pyplot as pltfrom scipy.signal import butter, lfilter, freqz, find_peaksdef lowpass_filter(data, Fs, cutoff_freq, order=5):    # 设计低通滤波器    b, a = butter(order, cutoff_freq/(Fs/2), btype='low', analog=False)    # 应用滤波器    y = lfilter(b, a, data)    return y# 假设文件名为 'data.txt'filename = 'myData.txt'filename_pai = 'pai.txt'# 使用 numpy.genfromtxt 函数读取文件# 假设数据是以空格分隔的#matrix = np.genfromtxt(filename, dtype=float)# 如果数据是以逗号分隔的，可以这样：matrix = np.genfromtxt(filename, dtype=float, delimiter=',')pai = np.genfromtxt(filename_pai, dtype=float, delimiter='\n')r1 = [row[0] for row in matrix]print(r1)# 设定截止频率cutoff_freq = 25Fs=360Ts=1/Fsthreshold = 0.8threshold1 = 0.7y_min = -0.7y_max = 1# 应用低通滤波器filtered_data = lowpass_filter(r1, Fs, cutoff_freq)# 使用find_peaks函数来寻找峰值peaks, _ = find_peaks(filtered_data, height=0.5)  # height参数可以根据实际情况调整t=np.linspace(0,Ts*len(r1),len(r1))plt.subplot(2,1,1)plt.plot(t,r1)for x in pai:    plt.vlines(x, ymin=y_min, ymax=y_max, colors='r', linewidth=1)#plt.xlim(0,5)plt.ylim(-0.7,1)#plt.scatter([i for i, val in enumerate(r1) if val > threshold], [val for val in r1 if val > threshold], color='red', marker='o', s=10) # 标记大于阈值的数据点为红色plt.subplot(2,1,2)plt.plot(t,filtered_data)plt.plot(peaks/Fs, filtered_data[peaks], 'x', color='r', markersize=10)for i in range(len(peaks)):    plt.annotate('R',(peaks[i]/Fs, filtered_data[peaks[i]]+0.05))#for x in pai:#    plt.vlines(x, ymin=y_min, ymax=y_max, colors='r', linewidth=1)plt.ylim(-0.7,1)#plt.scatter([i for i, val in enumerate(filtered_data) if val > threshold], [val for val in filtered_data if val > threshold], color='red', marker='o', s=10) # 标记大于阈值的数据点为红色plt.show()ecg_data = filtered_data# 假设心电图数据存储在名为ecg_data的一维数组中# 设置寻找峰值的距离和高度阈值distance = 10height_threshold = 0.1# 寻找R波峰值peaks_r, _ = find_peaks(ecg_data, distance=distance, height=height_threshold)plt.figure(figsize=(12, 6))plt.plot(ecg_data)plt.plot(peaks_r, ecg_data[peaks_r], 'ro', label='R peaks')plt.title("R")plt.show()# 寻找S波峰值peaks_s = []for r_peak in peaks_r:    s_search_range = ecg_data[r_peak:]  # 限定在R波之后搜索S波    s_peak, _ = find_peaks(-1*s_search_range, height=height_threshold)    if len(s_peak) > 0:        peaks_s.append(s_peak[0] + r_peak)plt.figure(figsize=(12, 6))plt.plot(ecg_data)plt.plot(peaks_s, ecg_data[peaks_s], 'co', label='S peaks')plt.title("S")plt.show()# 寻找T波峰值peaks_t = []height_threshold_t = -0.3for i in range(len(peaks_s)-1):    print('Searching', peaks_s[i], peaks_r[i+1])    t_search_range = ecg_data[peaks_s[i]:peaks_r[i+1]]  # 限定在R波之后搜索T波    t_peak, _ = find_peaks(t_search_range, height=height_threshold_t, distance=peaks_r[i+1]-peaks_r[i]+50)    if len(t_peak) > 0:        peaks_t.append(t_peak[0] + peaks_s[i])plt.figure(figsize=(12, 6))plt.plot(ecg_data)plt.plot(peaks_t, ecg_data[peaks_t], 'mo', label='T peaks')plt.title("T")plt.show()# 寻找P波峰值peaks_p = []height_threshold_p = -0.4for i in range(len(peaks_s)-1):    p_search_range = ecg_data[peaks_t[i]:peaks_r[i+1]]  # 限定在R波之前搜索P波    p_peak, _ = find_peaks(p_search_range, height=height_threshold_p, distance=peaks_r[i+1]-peaks_r[i]+50)    if len(p_peak) > 0:        peaks_p.append(p_peak[-1] + peaks_t[i])plt.figure(figsize=(12, 6))plt.plot(ecg_data)plt.plot(peaks_p, ecg_data[peaks_p], 'go', label='P peaks')plt.title("P")plt.show()# 寻找Q波峰值peaks_q = []for r_peak in peaks_r:    q_search_range = ecg_data[:r_peak]  # 限定在R波之前搜索Q波    q_peak, _ = find_peaks(-q_search_range, height=height_threshold)    if len(q_peak) > 0:        peaks_q.append(q_peak[-1])plt.figure(figsize=(12, 6))plt.plot(ecg_data)plt.plot(peaks_q, ecg_data[peaks_q], 'bo', label='Q peaks')plt.title("Q")plt.show()# 寻找U波峰值peaks_u = []for t_peak in peaks_t:    u_search_range = ecg_data[t_peak:]+1  # 限定在T波之后搜索U波    u_peak, _ = find_peaks(u_search_range, height=height_threshold)    if len(u_peak) > 0:        peaks_u.append(u_peak[0] + t_peak)plt.figure(figsize=(12, 6))plt.plot(ecg_data)if len(peaks_u) > 0:    plt.plot(peaks_u, ecg_data[peaks_u], 'yo', label='U peaks')plt.title("U")plt.show()# 绘制心电图和标记的波峰plt.figure(figsize=(12, 6))plt.plot(ecg_data)plt.plot(peaks_r, ecg_data[peaks_r], 'ro', label='R peaks')plt.plot(peaks_p, ecg_data[peaks_p], 'go', label='P peaks')plt.plot(peaks_q, ecg_data[peaks_q], 'bo', label='Q peaks')plt.plot(peaks_s, ecg_data[peaks_s], 'co', label='S peaks')plt.plot(peaks_t, ecg_data[peaks_t], 'mo', label='T peaks')if len(peaks_u) > 0:    plt.plot(peaks_u, ecg_data[peaks_u], 'yo', label='U peaks')plt.legend()plt.show()